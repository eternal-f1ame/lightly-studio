import type { LayoutRouteId } from '../routes/$types';

type SampleWithAnnotationParams = {
    sampleId: string;
    datasetId: string;
    annotationId: string;
    annotationIndex?: number;
};

// LayoutRouteId is autogenerated from project structure
export const APP_ROUTES: Record<string, LayoutRouteId> = {
    annotations: '/datasets/[dataset_id]/annotations',
    samples: '/datasets/[dataset_id]/samples',
    classifiers: '/datasets/[dataset_id]/classifiers',
    sampleDetails: '/datasets/[dataset_id]/samples/[sampleId]/[sampleIndex]',
    sampleDetailsWithoutIndex: '/datasets/[dataset_id]/samples/[sampleId]',
    annotationDetails:
        '/datasets/[dataset_id]/annotations/[sampleId]/[annotationId]/[annotationIndex]',
    captions: '/datasets/[dataset_id]/captions'
};

export const isSampleDetailsRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.sampleDetails : false;
};

export const isSampleDetailsWithoutIndexRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.sampleDetailsWithoutIndex : false;
};

export const isAnnotationDetailsRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.annotationDetails : false;
};

export const isSamplesRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.samples : false;
};

export const isAnnotationsRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.annotations : false;
};

export const isCaptionsRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.captions : false;
};

export const isClassifiersRoute = (routeId: string | null): boolean => {
    return routeId ? routeId == APP_ROUTES.classifiers : false;
};

export const routes = {
    home: () => `/`,
    // Dataset routes
    dataset: {
        sample: ({ sampleId, datasetId, sampleIndex }: SampleToSampleParams) => {
            let path = `/datasets/${datasetId}/samples/${sampleId}`;

            if (typeof sampleIndex !== 'undefined') {
                path = `${path}/${sampleIndex}`;
            }
            return path;
        },
        sampleWithAnnotation: ({
            sampleId,
            datasetId,
            annotationId,
            annotationIndex
        }: SampleWithAnnotationParams) => {
            return `/datasets/${datasetId}/annotations/${sampleId}/${annotationId}/${annotationIndex}`;
        },
        samples: (datasetId: string) => `/datasets/${datasetId}/samples`,
        captions: (datasetId: string) => `/datasets/${datasetId}/captions`,
        annotations: (datasetId: string) => `/datasets/${datasetId}/annotations`,
        classifiers: (datasetId: string) => `/datasets/${datasetId}/classifiers`
    }
};

type SampleToSampleParams = {
    sampleId: string;
    datasetId: string;
    sampleIndex?: number;
};

export const routeHelpers = {
    toHome: () => routes.home(),
    toCaptions: (datasetId: string) => routes.dataset.captions(datasetId),
    toSamples: (datasetId: string) => routes.dataset.samples(datasetId),
    toAnnotations: (datasetId: string) => routes.dataset.annotations(datasetId),
    toSample: (params: SampleToSampleParams) => {
        return routes.dataset.sample(params);
    },
    toSampleWithAnnotation: (params: SampleWithAnnotationParams) =>
        routes.dataset.sampleWithAnnotation(params),
    toClassifiers: (datasetId: string) => routes.dataset.classifiers(datasetId)
};
